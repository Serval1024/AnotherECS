// <auto-generated>
// This source code was auto-generated by AdapterGenerator.cs
// </auto-generated>

using AnotherECS.Core;
using AnotherECS.Serializer;
using System.Runtime.CompilerServices;

namespace AnotherECS.Gen.Common
{
    public struct Adapter<#ADAPTER_TYPE#><T> : ISingleAdapter<T>, IAdapterReference<#IF DISPOSE#>, IDisposableInternal<#END#><#IF HISTORY#>, IRevert<#END#>, IComponentFactory<T><#IF COPYABLE#>, IRecycleInternal<#END#>, ISerialize<#IF INJECT#>, IInjectSupportInternal<#END#><#IF ATTACH#>, IAttachInternal<#END#><#IF DETACH#>, IDetachInternal<#END#><#IF HISTORY#>, IHistoryBindExternalInternal<#END#><#IF ATTACH || DETACH#>, IStateBindExternalInternal<#END#>
        where T : <#IF BLITTABLE#>unmanaged<#ELSE#>struct<#END#>, IComponent<#GENERIC_CONSTRAINTS#>
    {
        private Pool<#POOL_TYPE#><T> _pool;

        public Adapter<#ADAPTER_TYPE#>(ref Pool<#POOL_TYPE#><T> pool)
        {
            _pool = pool;
#if ANOTHERECS_DEBUG
            _state = null;
#endif
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsHas()
            => _pool.IsHas();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref readonly T Read()
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool);
#endif
            return ref _pool.Read();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref T Get()
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool);
#endif
            return ref _pool.Get();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(T data)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool);
#endif
            _pool.Set(ref data);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(ref T data)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool);
#endif
            _pool.Set(ref data);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetOrAdd(T data)
            => SetOrAdd(ref data);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetOrAdd(ref T data)
        {
            if (IsHas())
            {
                Set(ref data);
            }
            else
            {
                Add(ref data);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref T Add()
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool, false);
#endif
            return ref _pool.Add();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(T data)
            => Add(ref data);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(ref T data)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool, false);
#endif
            _pool.Add(ref data);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        ref T ISingleAdapter<T>.AddSync()
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool, false);
#endif
            return ref Add();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void ISingleAdapter.AddSyncVoid()
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool, false);
#endif
            Add();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove()
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, _pool);
#endif
            RemoveInternal();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void ISingleAdapter.RemoveSync()
            => Remove();


<#IF HISTORY:BYTICK#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void TickFinished()
            => _pool.PushChanges();
<#END#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T Create()
            => _pool.Create();

<#IF DISPOSE#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IDisposableInternal.Dispose()
            => _pool.Dispose();
<#END#>

<#IF COPYABLE#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IRecycleInternal.Recycle()
            => _pool.Recycle();
<#END#>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void RemoveInternal()
            => _pool.Remove();        
<#IF ATTACH#>
        void IAttachInternal.Attach()
            => _pool.Attach();
<#END#>
<#IF DETACH#>
        void IDetachInternal.Detach()
            => _pool.Detach();
<#END#>

<#IF HISTORY#>
        void IHistoryBindExternalInternal.BindExternal(IHistory history)
            => _pool.BindExternal(history);
<#END#>

<#IF ATTACH || DETACH#>
        void IStateBindExternalInternal.BindExternal(State state)
            => _pool.BindExternal(state);
<#END#>

<#IF INJECT#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IInjectSupportInternal.BindInject(ref InjectContainer injectContainer, IInjectMethodsReference[] injectMethods)
            => _pool.BindInject(ref injectContainer, injectMethods);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IInjectSupportInternal.ReInject()
            => _pool.ReInject();
<#END#>

<#IF HISTORY#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IRevert.RevertTo(uint tick)
            => _pool.RevertTo(tick);
<#END#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IAdapter.Rebind(IPool pool)
            => _pool = (Pool<#POOL_TYPE#><T>)pool;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IAdapter.Clear()
            => _pool.Clear();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        IPool IAdapter.GetPool()
            => _pool;

        public void Pack(ref WriterContextSerializer writer)
        {
            _pool.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _pool.Unpack(ref reader);
        }

#if ANOTHERECS_DEBUG
        private IDebugException _state;

        void IAdapter.SetState(IDebugException state)
        {
            _state = state;
        }
#endif
    }
}
