// <auto-generated>
// This source code was auto-generated by AdapterGenerator.cs
// </auto-generated>

using AnotherECS.Core;
using AnotherECS.Serializer;
using System.Runtime.CompilerServices;
using EntityId = System.UInt32;

namespace AnotherECS.Gen.Common
{
    public <#IF STORAGE_REFERNCE#>class<#ELSE#>struct<#END#> Adapter<#ADAPTER_TYPE#><T> : IEntityAdapter<#IF !EMPTY#><T><#END#>, IEntityAdapterAdd<T>, IAdapterReference<#IF DISPOSE#>, IDisposableInternal<#END#><#IF HISTORY#>, IRevert<#END#>, IComponentFactory<T><#IF COPYABLE#>, IRecycleInternal<#END#>, ISerialize<#IF INJECT#>, IInjectSupportInternal<#END#><#IF ATTACH#>, IAttachInternal<#END#><#IF DETACH#>, IDetachInternal<#END#><#IF ATTACH || DETACH#>, IStateBindExternalInternal<#END#>
        where T : <#IF BLITTABLE#>unmanaged<#ELSE#>struct<#END#>, IComponent<#GENERIC_CONSTRAINTS#>
    {
<#IF !MARKER#>
        private Entities _entities;
<#END#>
<#IF FILTER#>
        private Filters _filters;
<#END#>
<#IF !EMPTY || VERSION#>
---<#IF DIRECTACCESS#>
        private Adapters _adapters;
---<#END#>
<#END#>
<#IF EMPTY#>
        private DefaultContainer _empty;
<#END#>
        private Storage<#STORAGE_TYPE#><T> _storage;
        private ushort _id;

        public Adapter<#ADAPTER_TYPE#>(ref Storage<#STORAGE_TYPE#><T> storage)
        {
            _storage = storage;
            _id = _storage.GetTypeId();
<#IF !MARKER#>
            _entities = default;
<#END#>
<#IF FILTER#>
            _filters = default;
<#END#>
<#IF !EMPTY || VERSION#>
---<#IF DIRECTACCESS#>
            _adapters = default;
---<#END#>
<#END#>
<#IF EMPTY#>
            _empty = new DefaultContainer();
<#END#>
#if ANOTHERECS_DEBUG
            _state = null;
#endif
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsHas(EntityId id)
            => _storage.IsHas(id);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IComponent GetCopy(EntityId id)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
#endif
<#IF !EMPTY#>
            return _storage.Read(id);
<#ELSE#>
            return default(T);
<#END#>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetUnknow(EntityId id, IComponent component)
        {
<#IF !EMPTY#>
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
            if (component.GetType() != typeof(T))
            {
                throw new Exceptions.ComponentCastException(component.GetType(), typeof(T));
            }
#endif
            var concrete = (T)component;
            _storage.Set(id, ref concrete);
<#END#>
        }

<#IF !EMPTY#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref readonly T Read(EntityId id)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
#endif
            return ref _storage.Read(id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref T Get(EntityId id)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
#endif
            return ref _storage.Get(id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(EntityId id, T data)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
#endif
            _storage.Set(id, ref data);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(EntityId id, ref T data)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
#endif
            _storage.Set(id, ref data);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(EntityId id, T data)
            => Add(id, ref data);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(EntityId id, ref T data)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage, false);
#endif
---<#IF !EMPTY || VERSION#>
------<#IF DIRECTACCESS#>
            if (_storage.TryResizeDense())
            {
                _adapters.Rebind(_id, _storage);
            }
------<#ELSE#>
            _storage.TryResizeDense();
------<#END#>
---<#END#>
            _storage.Add(id, ref data);
            AddInternal(id);
        }
<#END#>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        unsafe ref T IEntityAdapterAdd<T>.AddSync(EntityId id, State state, delegate*<State, int, void> sync)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage, false);
#endif
<#IF !EMPTY || VERSION#>
---<#IF DIRECTACCESS#>
            if (_storage.TryResizeDense())
            {
                sync(state, _id);
            }
---<#ELSE#>
            _storage.TryResizeDense();
---<#END#>
<#END#>
<#IF !EMPTY#>
            ref var ret = ref _storage.Add(id);
            AddInternal(id);
            return ref ret;
<#ELSE#>
            _storage.Add(id);
            AddInternal(id);
            return ref _empty.value;
<#END#>
        }

         [MethodImpl(MethodImplOptions.AggressiveInlining)]
        unsafe void IEntityAdapterAdd<T>.AddSyncVoid(EntityId id, ref T data, State state, delegate*<State, int, void> sync)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage, false);
#endif
<#IF !EMPTY || VERSION#>
---<#IF DIRECTACCESS#>
            if (_storage.TryResizeDense())
            {
                sync(state, _id);
            }
---<#ELSE#>
            _storage.TryResizeDense();
---<#END#>
<#END#>
<#IF !EMPTY#>
            _storage.Add(id, ref data);
<#ELSE#>
            _storage.Add(id);
<#END#>
            AddInternal(id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
<#IF !EMPTY#>
        public ref T Add(EntityId id)
<#ELSE#>
        public void Add(EntityId id)
<#END#>
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage, false);
#endif
<#IF !EMPTY || VERSION#>
---<#IF DIRECTACCESS#>
            if (_storage.TryResizeDense())
            {
                _adapters.Rebind(_id, _storage);
            }
---<#ELSE#>
            _storage.TryResizeDense();
---<#END#>
<#END#>
<#IF !EMPTY#>
            ref var ret = ref _storage.Add(id);
            AddInternal(id);
            return ref ret;
<#ELSE#>
            _storage.Add(id);
            AddInternal(id);
<#END#>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        unsafe void IEntityAdapter.AddSyncVoid(EntityId id, State state, delegate*<State, int, void> sync)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage, false);
#endif
<#IF !EMPTY || VERSION#>
---<#IF DIRECTACCESS#>
            if (_storage.TryResizeDense())
            {
                sync(state, _id);
            }
---<#ELSE#>
            _storage.TryResizeDense();
---<#END#>
<#END#>
            _storage.Add(id);
            AddInternal(id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove(EntityId id)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
#endif
            RemoveInternal(id);
<#IF !MARKER && !EMPTY#>
---<#IF DIRECTACCESS#>
            if (_storage.TryRecycledResized())
            {
                _adapters.Rebind(_id, _storage);
            }
---<#ELSE#>
            _storage.TryRecycledResized();
---<#END#>
<#END#>
            _storage.Remove(id);
<#IF !MARKER#>
            _entities.Remove(id, _id);
<#END#>
        }

<#IF HISTORY:BYTICK || MARKER#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void TickFinished()
        {
---<#IF HISTORY:BYTICK#>
            _storage.PushChanges();
---<#END#>
---<#IF MARKER#>
            _storage.Clear();
---<#END#>
        }
<#END#>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T Create()
            => _storage.Create();

<#IF DISPOSE#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IDisposableInternal.Dispose()
            => _storage.Dispose();
<#END#>

<#IF COPYABLE#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IRecycleInternal.Recycle()
            => _storage.Recycle();
<#END#>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void AddInternal(EntityId id)
        {
<#IF INCLUDE && EXCLUDE#>
            _filters.ComponentAdd(id, _id);
<#END#>
<#IF INCLUDE#>
            _filters.ComponentAddInclude(id, _id);
<#END#>
<#IF EXCLUDE#>
            _filters.ComponentAddExclude(id, _id);
<#END#>
<#IF !MARKER#>
            _entities.Add(id, _id);
<#END#>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void RemoveInternal(EntityId id)
        {
<#IF INCLUDE && EXCLUDE#>
            _filters.ComponentRemove(id, _id);
<#END#>
<#IF INCLUDE#>
            _filters.ComponentRemoveInclude(id, _id);
<#END#>
<#IF EXCLUDE#>
            _filters.ComponentRemoveExclude(id, _id);
<#END#>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        bool IEntityAdapter.RemoveRaw(EntityId id)
        {
            RemoveInternal(id);
<#IF !MARKER && !EMPTY#>
---<#IF DIRECTACCESS#>
            var isResized = _storage.TryRecycledResized();
---<#ELSE#>
            _storage.TryRecycledResized();
---<#END#>
<#END#>
            _storage.Remove(id);
<#IF !MARKER && !EMPTY && DIRECTACCESS#>
            return isResized;
<#ELSE#>
            return false;
<#END#>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        bool IEntityAdapter.RemoveSync(EntityId id)
        {
#if ANOTHERECS_DEBUG
            ExceptionHelper.ThrowIfInvalide(_state, id, _storage);
#endif
            RemoveInternal(id);
<#IF !MARKER && !EMPTY#>
---<#IF DIRECTACCESS#>
            var isResized = _storage.TryRecycledResized();
---<#ELSE#>
            _storage.TryRecycledResized();
---<#END#>
<#END#>
            _storage.Remove(id);
<#IF !MARKER#>
            _entities.Remove(id, _id);
<#END#>
<#IF !MARKER && !EMPTY && DIRECTACCESS#>
            return isResized;
<#ELSE#>
            return false;
<#END#>
        }
<#IF ATTACH#>
        void IAttachInternal.Attach()
            => _storage.Attach();
<#END#>
<#IF DETACH#>
        void IDetachInternal.Detach()
            => _storage.Detach();
<#END#>

<#IF ATTACH || DETACH#>
        void IStateBindExternalInternal.BindExternal(State state)
            => _storage.BindExternal(state);
<#END#>

<#IF INJECT#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IInjectSupportInternal.BindInject(ref InjectContainer injectContainer, IInjectMethodsReference[] injectMethods)
            => _storage.BindInject(ref injectContainer, injectMethods);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IInjectSupportInternal.ReInject()
            => _storage.ReInject();
<#END#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IEntityAdapter.Resize(int capacity)
            => _storage.Resize(capacity);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IEntityAdapter.BindExternal(Entities entities, Filters filters, ref Adapters adapters)
        {
<#IF !MARKER#>
            _entities = entities;
<#END#>
<#IF FILTER#>
            _filters = filters;
<#END#>
<#IF !EMPTY || VERSION#>
---<#IF DIRECTACCESS#>
            _adapters = adapters;
---<#END#>
<#END#>
        }
<#IF HISTORY#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IRevert.RevertTo(uint tick)
            => _storage.RevertTo(tick);
<#END#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IAdapter.Rebind(IStorage storage)
            => _storage = (Storage<#STORAGE_TYPE#><T>)storage;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IAdapter.Clear()
            => _storage.Clear();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        IStorage IAdapter.GetStorage()
            => _storage;

        public void Pack(ref WriterContextSerializer writer)
        {
            _storage.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _storage.Unpack(ref reader);
            _id = _storage.GetTypeId();
<#IF EMPTY#>
            _empty = new DefaultContainer();
<#END#>
        }

#if ANOTHERECS_DEBUG
        private IDebugException _state;

        void IAdapter.SetState(IDebugException state)
        {
            _state = state;
        }
#endif

<#IF EMPTY#>
        public class DefaultContainer
        {
            public T value;
        }
<#END#>
    }
}
