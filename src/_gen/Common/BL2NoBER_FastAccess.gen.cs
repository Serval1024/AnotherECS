// <auto-generated>
// This source code was auto-generated by FastAccessGenerator.cs
// </auto-generated>

using AnotherECS.Core;
using AnotherECS.Core.Allocators;
using AnotherECS.Core.Caller;
using System;
using System.Runtime.CompilerServices;
using EntityId = System.UInt32;

namespace AnotherECS.Gen.Common
{
#if ENABLE_IL2CPP
    [Unity.IL2CPP.CompilerServices.Il2CppSetOption(Option.NullChecks, false)]
    [Unity.IL2CPP.CompilerServices.Il2CppSetOption(Option.ArrayBoundsChecks, false)]
#endif
    public unsafe struct BL2NoBER_FA<TComponent> : IFastAccess
        where TComponent : unmanaged, IComponent
    {
        private Caller<
				HAllocator, ushort, TComponent, ushort, 
#if ANOTHERECS_HISTORY_DISABLE
				NoHistoryAllocatorCF,
#else
				HistoryAllocatorCF,
#endif
				UshortNumber,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				RecycleStorageCF<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				UshortSparseCF < HAllocator, TComponent>,
				UshortDenseCF<HAllocator, ushort, TComponent>,
				BinderToFiltersCF,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				BSerializeCF<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>
				>
			 _caller;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        void IFastAccess.Config(ICaller caller)
        {
            _caller = (Caller<
				HAllocator, ushort, TComponent, ushort, 
#if ANOTHERECS_HISTORY_DISABLE
				NoHistoryAllocatorCF,
#else
				HistoryAllocatorCF,
#endif
				UshortNumber,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				RecycleStorageCF<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				UshortSparseCF < HAllocator, TComponent>,
				UshortDenseCF<HAllocator, ushort, TComponent>,
				BinderToFiltersCF,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				BSerializeCF<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>,
				Nothing<HAllocator, ushort, TComponent, ushort>
				>
			)caller;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TComponent Create()
            => _caller.Create();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Type GetElementType()
            => _caller.GetElementType();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint GetCount()
            => _caller.GetCount();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsHas(EntityId id)
            => _caller.IsHas(id);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(EntityId id, ref TComponent data)
        {
            _caller.Add(id, ref data);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(EntityId id, TComponent data)
        {
            _caller.Add(id, ref data);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref TComponent Add(EntityId id)
            => ref _caller.Add(id);
            
        public void AddVoid(EntityId id)
        {
            _caller.Add(id);
        }

        public void Remove(EntityId id)
        {
            _caller.Remove(id);
        }

        public ref readonly TComponent Read(EntityId id)
            => ref _caller.Read(id);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref TComponent Get(EntityId id)
            => ref _caller.Get(id);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(EntityId id, ref TComponent data)
        {
            _caller.Set(id, ref data);
        }

        public uint GetVersion(EntityId id)
            => _caller.GetVersion(id);
    }
}