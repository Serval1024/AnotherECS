//GENERATOR = AnotherECS.Generator.FListGenerator FILENAME = FList.cs

// <auto-generated>
// This source code was auto-generated by FListGenerator.cs
// </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using AnotherECS.Core;
using AnotherECS.Serializer;

namespace AnotherECS.Collections
{
    [Serializable]
    [ForceBlittable]
    public struct FList2<TData> : ICList<TData>, IList<TData>, ISerialize, IEnumerable<TData>
        where TData : unmanaged
    {
        public FArray2<TData> _data;
        public int _count;

        public int Capacity
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data.Length;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _count;
			internal set => _count = value;
        }

        public bool IsReadOnly => false;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ExtendToCapacity()
        {
            _count = Capacity;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(TData value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveLast()
        {
            if (_count != 0)
            {
                this[--_count] = default;
            }
        }

        public void RemoveAt(int index)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfEmpty(_count);
#endif	
            _data.RemoveAtInternal(index, Capacity);
			--_count;
        }
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            _data.Clear();
			_count = 0;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public object Get(int index)
            => this[index];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(int index, object @value)
        {
            this[index] = (TData)@value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(object value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = (TData)value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerator<TData> GetEnumerator()
            => new Enumerator(ref this);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(TData item)
            => IndexOf(ref item, _count);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(ref TData item)
            => IndexOf(ref item, _count);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal int IndexOf(ref TData item, int count)
            => _data.IndexOf(ref item, count);

        public bool Contains(TData item)
            => Contains(ref item);

        public bool Contains(ref TData item)
            => IndexOf(ref item) != -1;

        public void Insert(int index, TData item)
        {
            Insert(index, ref item);
        }

        public void Insert(int index, ref TData item)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
			_data.Insert(index, ref item);
            ++_count;
        }

        public bool Remove(TData item)
        {
            var index = IndexOf(ref item);
            if (index != -1)
            {
                RemoveAt(index);
                return true;
            }
            return false;
        }

        public void CopyTo(TData[] array, int arrayIndex)
        {
			_data.CopyTo(array, arrayIndex, _count, _count);
        }

        public void CopyTo(TData[] array, int arrayIndex, int count)
        {
			_data.CopyTo(array, arrayIndex, count, _count);
        }

        public void Pack(ref WriterContextSerializer writer)
        {
            writer.Write(_count);
            _data.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _count = reader.ReadInt32();
            _data.Unpack(ref reader);
        }

        public TData this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data[index];
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => _data[index] = value;
        }
		
	
        public struct Enumerator : IEnumerator<TData>
        {
            private readonly FList2<TData> _data;
            private int _current;

            public Enumerator(ref FList2<TData> data)
            {
                _data = data;
                _current = -1;
            }

            public TData Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => _data[_current];
            }

            object IEnumerator.Current
                => _data[_current];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
                => ++_current < _data.Count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset()
            {
                _current = -1;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose() { }
        }
    }
    [Serializable]
    [ForceBlittable]
    public struct FList4<TData> : ICList<TData>, IList<TData>, ISerialize, IEnumerable<TData>
        where TData : unmanaged
    {
        public FArray4<TData> _data;
        public int _count;

        public int Capacity
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data.Length;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _count;
			internal set => _count = value;
        }

        public bool IsReadOnly => false;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ExtendToCapacity()
        {
            _count = Capacity;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(TData value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveLast()
        {
            if (_count != 0)
            {
                this[--_count] = default;
            }
        }

        public void RemoveAt(int index)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfEmpty(_count);
#endif	
            _data.RemoveAtInternal(index, Capacity);
			--_count;
        }
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            _data.Clear();
			_count = 0;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public object Get(int index)
            => this[index];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(int index, object @value)
        {
            this[index] = (TData)@value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(object value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = (TData)value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerator<TData> GetEnumerator()
            => new Enumerator(ref this);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(TData item)
            => IndexOf(ref item, _count);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(ref TData item)
            => IndexOf(ref item, _count);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal int IndexOf(ref TData item, int count)
            => _data.IndexOf(ref item, count);

        public bool Contains(TData item)
            => Contains(ref item);

        public bool Contains(ref TData item)
            => IndexOf(ref item) != -1;

        public void Insert(int index, TData item)
        {
            Insert(index, ref item);
        }

        public void Insert(int index, ref TData item)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
			_data.Insert(index, ref item);
            ++_count;
        }

        public bool Remove(TData item)
        {
            var index = IndexOf(ref item);
            if (index != -1)
            {
                RemoveAt(index);
                return true;
            }
            return false;
        }

        public void CopyTo(TData[] array, int arrayIndex)
        {
			_data.CopyTo(array, arrayIndex, _count, _count);
        }

        public void CopyTo(TData[] array, int arrayIndex, int count)
        {
			_data.CopyTo(array, arrayIndex, count, _count);
        }

        public void Pack(ref WriterContextSerializer writer)
        {
            writer.Write(_count);
            _data.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _count = reader.ReadInt32();
            _data.Unpack(ref reader);
        }

        public TData this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data[index];
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => _data[index] = value;
        }
		
	
        public struct Enumerator : IEnumerator<TData>
        {
            private readonly FList4<TData> _data;
            private int _current;

            public Enumerator(ref FList4<TData> data)
            {
                _data = data;
                _current = -1;
            }

            public TData Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => _data[_current];
            }

            object IEnumerator.Current
                => _data[_current];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
                => ++_current < _data.Count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset()
            {
                _current = -1;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose() { }
        }
    }
    [Serializable]
    [ForceBlittable]
    public struct FList8<TData> : ICList<TData>, IList<TData>, ISerialize, IEnumerable<TData>
        where TData : unmanaged
    {
        public FArray8<TData> _data;
        public int _count;

        public int Capacity
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data.Length;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _count;
			internal set => _count = value;
        }

        public bool IsReadOnly => false;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ExtendToCapacity()
        {
            _count = Capacity;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(TData value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveLast()
        {
            if (_count != 0)
            {
                this[--_count] = default;
            }
        }

        public void RemoveAt(int index)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfEmpty(_count);
#endif	
            _data.RemoveAtInternal(index, Capacity);
			--_count;
        }
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            _data.Clear();
			_count = 0;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public object Get(int index)
            => this[index];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(int index, object @value)
        {
            this[index] = (TData)@value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(object value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = (TData)value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerator<TData> GetEnumerator()
            => new Enumerator(ref this);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(TData item)
            => IndexOf(ref item, _count);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(ref TData item)
            => IndexOf(ref item, _count);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal int IndexOf(ref TData item, int count)
            => _data.IndexOf(ref item, count);

        public bool Contains(TData item)
            => Contains(ref item);

        public bool Contains(ref TData item)
            => IndexOf(ref item) != -1;

        public void Insert(int index, TData item)
        {
            Insert(index, ref item);
        }

        public void Insert(int index, ref TData item)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
			_data.Insert(index, ref item);
            ++_count;
        }

        public bool Remove(TData item)
        {
            var index = IndexOf(ref item);
            if (index != -1)
            {
                RemoveAt(index);
                return true;
            }
            return false;
        }

        public void CopyTo(TData[] array, int arrayIndex)
        {
			_data.CopyTo(array, arrayIndex, _count, _count);
        }

        public void CopyTo(TData[] array, int arrayIndex, int count)
        {
			_data.CopyTo(array, arrayIndex, count, _count);
        }

        public void Pack(ref WriterContextSerializer writer)
        {
            writer.Write(_count);
            _data.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _count = reader.ReadInt32();
            _data.Unpack(ref reader);
        }

        public TData this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data[index];
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => _data[index] = value;
        }
		
	
        public struct Enumerator : IEnumerator<TData>
        {
            private readonly FList8<TData> _data;
            private int _current;

            public Enumerator(ref FList8<TData> data)
            {
                _data = data;
                _current = -1;
            }

            public TData Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => _data[_current];
            }

            object IEnumerator.Current
                => _data[_current];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
                => ++_current < _data.Count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset()
            {
                _current = -1;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose() { }
        }
    }
    [Serializable]
    [ForceBlittable]
    public struct FList16<TData> : ICList<TData>, IList<TData>, ISerialize, IEnumerable<TData>
        where TData : unmanaged
    {
        public FArray16<TData> _data;
        public int _count;

        public int Capacity
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data.Length;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _count;
			internal set => _count = value;
        }

        public bool IsReadOnly => false;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ExtendToCapacity()
        {
            _count = Capacity;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(TData value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveLast()
        {
            if (_count != 0)
            {
                this[--_count] = default;
            }
        }

        public void RemoveAt(int index)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfEmpty(_count);
#endif	
            _data.RemoveAtInternal(index, Capacity);
			--_count;
        }
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            _data.Clear();
			_count = 0;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public object Get(int index)
            => this[index];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(int index, object @value)
        {
            this[index] = (TData)@value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(object value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = (TData)value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerator<TData> GetEnumerator()
            => new Enumerator(ref this);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(TData item)
            => IndexOf(ref item, _count);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(ref TData item)
            => IndexOf(ref item, _count);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal int IndexOf(ref TData item, int count)
            => _data.IndexOf(ref item, count);

        public bool Contains(TData item)
            => Contains(ref item);

        public bool Contains(ref TData item)
            => IndexOf(ref item) != -1;

        public void Insert(int index, TData item)
        {
            Insert(index, ref item);
        }

        public void Insert(int index, ref TData item)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
			_data.Insert(index, ref item);
            ++_count;
        }

        public bool Remove(TData item)
        {
            var index = IndexOf(ref item);
            if (index != -1)
            {
                RemoveAt(index);
                return true;
            }
            return false;
        }

        public void CopyTo(TData[] array, int arrayIndex)
        {
			_data.CopyTo(array, arrayIndex, _count, _count);
        }

        public void CopyTo(TData[] array, int arrayIndex, int count)
        {
			_data.CopyTo(array, arrayIndex, count, _count);
        }

        public void Pack(ref WriterContextSerializer writer)
        {
            writer.Write(_count);
            _data.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _count = reader.ReadInt32();
            _data.Unpack(ref reader);
        }

        public TData this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data[index];
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => _data[index] = value;
        }
		
	
        public struct Enumerator : IEnumerator<TData>
        {
            private readonly FList16<TData> _data;
            private int _current;

            public Enumerator(ref FList16<TData> data)
            {
                _data = data;
                _current = -1;
            }

            public TData Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => _data[_current];
            }

            object IEnumerator.Current
                => _data[_current];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
                => ++_current < _data.Count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset()
            {
                _current = -1;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose() { }
        }
    }
    [Serializable]
    [ForceBlittable]
    public struct FList32<TData> : ICList<TData>, IList<TData>, ISerialize, IEnumerable<TData>
        where TData : unmanaged
    {
        public FArray32<TData> _data;
        public int _count;

        public int Capacity
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data.Length;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _count;
			internal set => _count = value;
        }

        public bool IsReadOnly => false;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ExtendToCapacity()
        {
            _count = Capacity;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(TData value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveLast()
        {
            if (_count != 0)
            {
                this[--_count] = default;
            }
        }

        public void RemoveAt(int index)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfEmpty(_count);
#endif	
            _data.RemoveAtInternal(index, Capacity);
			--_count;
        }
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            _data.Clear();
			_count = 0;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public object Get(int index)
            => this[index];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(int index, object @value)
        {
            this[index] = (TData)@value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(object value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = (TData)value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerator<TData> GetEnumerator()
            => new Enumerator(ref this);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(TData item)
            => IndexOf(ref item, _count);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(ref TData item)
            => IndexOf(ref item, _count);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal int IndexOf(ref TData item, int count)
            => _data.IndexOf(ref item, count);

        public bool Contains(TData item)
            => Contains(ref item);

        public bool Contains(ref TData item)
            => IndexOf(ref item) != -1;

        public void Insert(int index, TData item)
        {
            Insert(index, ref item);
        }

        public void Insert(int index, ref TData item)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
			_data.Insert(index, ref item);
            ++_count;
        }

        public bool Remove(TData item)
        {
            var index = IndexOf(ref item);
            if (index != -1)
            {
                RemoveAt(index);
                return true;
            }
            return false;
        }

        public void CopyTo(TData[] array, int arrayIndex)
        {
			_data.CopyTo(array, arrayIndex, _count, _count);
        }

        public void CopyTo(TData[] array, int arrayIndex, int count)
        {
			_data.CopyTo(array, arrayIndex, count, _count);
        }

        public void Pack(ref WriterContextSerializer writer)
        {
            writer.Write(_count);
            _data.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _count = reader.ReadInt32();
            _data.Unpack(ref reader);
        }

        public TData this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data[index];
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => _data[index] = value;
        }
		
	
        public struct Enumerator : IEnumerator<TData>
        {
            private readonly FList32<TData> _data;
            private int _current;

            public Enumerator(ref FList32<TData> data)
            {
                _data = data;
                _current = -1;
            }

            public TData Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => _data[_current];
            }

            object IEnumerator.Current
                => _data[_current];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
                => ++_current < _data.Count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset()
            {
                _current = -1;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose() { }
        }
    }
    [Serializable]
    [ForceBlittable]
    public struct FList64<TData> : ICList<TData>, IList<TData>, ISerialize, IEnumerable<TData>
        where TData : unmanaged
    {
        public FArray64<TData> _data;
        public int _count;

        public int Capacity
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data.Length;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _count;
			internal set => _count = value;
        }

        public bool IsReadOnly => false;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ExtendToCapacity()
        {
            _count = Capacity;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(TData value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveLast()
        {
            if (_count != 0)
            {
                this[--_count] = default;
            }
        }

        public void RemoveAt(int index)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfEmpty(_count);
#endif	
            _data.RemoveAtInternal(index, Capacity);
			--_count;
        }
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            _data.Clear();
			_count = 0;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public object Get(int index)
            => this[index];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(int index, object @value)
        {
            this[index] = (TData)@value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(object value)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
            this[_count++] = (TData)value;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerator<TData> GetEnumerator()
            => new Enumerator(ref this);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(TData item)
            => IndexOf(ref item, _count);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int IndexOf(ref TData item)
            => IndexOf(ref item, _count);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal int IndexOf(ref TData item, int count)
            => _data.IndexOf(ref item, count);

        public bool Contains(TData item)
            => Contains(ref item);

        public bool Contains(ref TData item)
            => IndexOf(ref item) != -1;

        public void Insert(int index, TData item)
        {
            Insert(index, ref item);
        }

        public void Insert(int index, ref TData item)
        {
#if !ANOTHERECS_RELEASE
            FArrayHelper.ThrowIfOutOfRange(_count, Capacity);
#endif
			_data.Insert(index, ref item);
            ++_count;
        }

        public bool Remove(TData item)
        {
            var index = IndexOf(ref item);
            if (index != -1)
            {
                RemoveAt(index);
                return true;
            }
            return false;
        }

        public void CopyTo(TData[] array, int arrayIndex)
        {
			_data.CopyTo(array, arrayIndex, _count, _count);
        }

        public void CopyTo(TData[] array, int arrayIndex, int count)
        {
			_data.CopyTo(array, arrayIndex, count, _count);
        }

        public void Pack(ref WriterContextSerializer writer)
        {
            writer.Write(_count);
            _data.Pack(ref writer);
        }

        public void Unpack(ref ReaderContextSerializer reader)
        {
            _count = reader.ReadInt32();
            _data.Unpack(ref reader);
        }

        public TData this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => _data[index];
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => _data[index] = value;
        }
		
	
        public struct Enumerator : IEnumerator<TData>
        {
            private readonly FList64<TData> _data;
            private int _current;

            public Enumerator(ref FList64<TData> data)
            {
                _data = data;
                _current = -1;
            }

            public TData Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => _data[_current];
            }

            object IEnumerator.Current
                => _data[_current];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
                => ++_current < _data.Count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset()
            {
                _current = -1;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose() { }
        }
    }

}